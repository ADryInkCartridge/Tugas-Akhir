import seaborn as sns
import matplotlib.pyplot as plt

// corr -> correlation matrix dari dataset
corr = df.corr()

// membuat mask untuk menghilangkan nilai yang berada di atas diagonal, hal ini dilakukan untuk menghindari duplikasi nilai
mask = np.triu(np.ones_like(corr, dtype=bool))

// Set up matplotlib 
f, ax = plt.subplots(figsize=(11, 9))

// Membuat diverging colormap
cmap = sns.diverging_palette(230, 20, as_cmap=True)

sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .5})

function show_values(axs, orient = "") do
    
end

def show_values(axs, orient="v", space=.01):
    # Fungsi untuk menampilkan nilai dari setiap bar pada barplot
    def _single(ax):
        if orient == "v":
            for p in ax.patches:
                _x = p.get_x() + p.get_width() / 2
                _y = p.get_y() + p.get_height() + (p.get_height()*0.01)
                value = '{:.2f}'.format(p.get_height())
                ax.text(_x, _y, value, ha="center") 
        elif orient == "h":
            for p in ax.patches:
                _x = p.get_x() + p.get_width() + float(space)
                _y = p.get_y() + p.get_height() - (p.get_height()*0.5)
                value = '{:.2f}'.format(p.get_width())
                ax.text(_x, _y, value, ha="left")

    if isinstance(axs, np.ndarray):
        for idx, ax in np.ndenumerate(axs):
            _single(ax)
    else:
        _single(axs)

barplot = zip(corr.index,corr['Partisipasi'])
barplot = sorted(barplot, key=lambda x: x[1], reverse= True)
barplotx, barploty = zip(*barplot)

barplotx = np.array(barplotx)
barploty = np.array(barploty)

f, ax = plt.subplots(figsize=(11, 9))
p = sns.barplot(x=barplotx,y=barploty)
plt.xticks(rotation=90)
show_values(p)