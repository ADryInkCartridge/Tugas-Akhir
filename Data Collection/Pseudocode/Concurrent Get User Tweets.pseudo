// Import Library
import snscrape.modules.twitter as snstwitter
import pandas as pd
import concurrent.futures



set DATE = "since:2018-09-01 until:2019-05-31 min_faves:1 exclude:retweets"
// set DATE = Tanggal yang ingin diambil tweetnya dan filternya

set WORDS = pd.read_csv("Keywords.csv", delimiter = ";")

set FILTERED_WORDS = WORDS[WORDS["Words"] == 1].to_list()
// set FILTERED_WORDS = List of words yang ingin di filter

set MAX_TWEETS = 2000
// set MAX_TWEETS = Jumlah maksimal tweet yang ingin diambil

set COLUMN_NAME = ["username", "location","tweetID", "content", "renderedContent", "inReplyToTweetId", "inReplyToUser", "likeCount", "retweetCount", "quoteCount", "replyCount", "date"]
// set COLUMN_NAME = Nama kolom yang ingin diambil dari tweetnya

function filter_data(text): Boolean do
    Input = Teks yang ingin di filter
    Output = True jika ada kata yang terfilter, False jika tidak ada kata yang terfilter

    if (any(word in text for word in FILTERED_WORDS)) do
        return true
    end
    return false
end


function get_tweets(username): List<String> do
    Input = username yang ingin diambil tweetnya
    Output = List of tweets dari username tersebut

    username = username.strip()

    set KEYWORDS = "from: " + username
    set results = []

    for (i,tweet) in enumerate(snstwitter.TwitterSearchScraper(KEYWORDS + ' ' + DATE)).get_items() do
        if (filter_data(tweet.content)) do
            res.append([
                tweet.user.username,
                tweet.user.location,
                tweet.retweetCount,
                tweet.id,
                tweet.content,
                tweet.renderedContent,
                tweet.inReplyTweetId,
                tweet.inReplyToUser,
                tweet.likeCount,
                tweet.retweetCount,
                tweet.quoteCount,
                tweet.replyCount,
                tweet.date,
            ])
            // res.append([
            //     Kolom yang ingin diambil dari tweetnya
            // ])
        end
        if (i > MAX_TWEETS) do
            break
        end
    end 
    return list hasil tweet dari username tersebut
end


function concurrent_get_tweets(usernames):List<String> do
    Input = List dari username yang ingin diambil tweetnya
    Output = List dari hasil tweet dari semua username

    // Inisialisasi worker untuk mengambil tweet
    with concurrent.futures.ThreadPoolExecutor() as executor do
        // Memberikan task untuk mengambil tweet kepada worker
        set futures = [executor.submit(get_tweets, username) for username in usernames]
        // Inisialisasi variabel untuk menyimpan hasil jika terjadi error
        set Autosave = pd.DataFrame(columns = COLUMN_NAME)
        set Count = 0

        // Mengambil hasil dari worker yang telah selesai
        foreach (future in concurrent.futures.as_completed(futures)) do
            try do
                data = future.result()
                result.extend(data)
                Count += 1
                // Menyimpan hasil setiap 100 Usernames
                if (Count % 100 == 0) do
                    Autosave = pd.DataFrame(result, columns = COLUMN_NAME)
                    Autosave.to_csv("Data.csv", index = False)
                end
                
            end catch(err) do
                print(err)
            end
        end
        return list hasil tweet dari semua username
    end
end